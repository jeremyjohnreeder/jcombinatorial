#summary An example series of parameterized JUnit tests that utilize JCombinatorial.
#labels parameterized,testing,example,pairwise,all-pairs,exhaustive,smoke,regression

= Abstract test =
{{{
/** Represents an example of a parameterized test.
 * This example verifies that a user can place an order through an E-commerce web-site. */
@RunWith(Parameterized.class) // This annotation tells JUnit to run this as a parameterized test.
public abstract class ExampleTest {
	// === TEST PARAMETERS ===
	private User user;
	private Coupon coupon;
	private Product product;
	private Payment payment;

	/** Constructs a test case to verify that a user can place an order. */
	public ExampleTest(User user, Product product, Coupon coupon, Payment payment) {
		this.user = user;
		this.product = product;
		this.coupon = coupon;
		this.payment = payment;
	}

	/** Returns the recommended values to test for each test parameter.
	 * @return an array of Sets, where each Set contains possible values for one of the test parameters. */
	protected static Set[] valuesToTestForEachParameter() {
		return new Set[] {
			User.userSet(), Product.productSet(), Coupon.couponSet(), Payment.paymentSet()
		};
	}

	// === THE TEST ===
	/** Runs the test case. */
	@Test public void userCanPurchaseProductWithCouponAndPayment() {
		System.out.printf(
			"user=«%s», product=«%s», coupon=«%s», payment=«%s»",
			user, product, coupon, payment
		);

		System.out.println("Preparatory step: Construct an order.");
		final Order order = new Order();
		order.setUser(user);
		order.addProduct(product);
		order.setCoupon(coupon);
		order.addPayment(payment);

		System.out.println("Test step: Place the order.")
		final ECommerceWebSite webSite = new ECommerceWebSite();
		webSite.placeOrder(order);
	}
}
}}}
Note the *{{{@Test}}}* annotation, the *{{{public}}}* modifier, and the *{{{void}}}* return-type on the *{{{userCanPurchaseProductWithCouponAndPayment()}}}* method. Also note that it takes no parameters. (It gets the test-parameters indirectly through the class constructor.) Without all of these attributes, JUnit would have an initialization error.

= Concrete test implementations =

== Smoke test ==
{{{
/** Represents a smoke-test (all-values) version of ExampleTest.
 * Tests a very limited number of combinations of parameter values, but ensures that all values get tested. */
public class ExampleTest_Smoke extends ExampleTest {
	public ExampleTest_Smoke(User user, Product product, Coupon coupon, Payment payment) {
		super(userFactory, productFactory, couponFactory, paymentFactory);
	}

	/** Returns a tiny list of parameter combinations (i.e. test cases).
	 * @return the combination list. */
	@Parameterized.Parameters public static List<Object[]> listOfParameterCombinations() {
		final ParameterFactory parameterFactory = new AllValuesParameterFactory();
		parameterFactory.setValuesToTestForEachParameter(
			valuesToTestForEachParameter() // from abstract class
		);
		return parameterFactory.createListOfParameterCombinations();
	}
}
}}}

Note the *{{{@Parameterized.Parameters}}}* annotation and the *{{{public static}}}* modifiers on the *{{{listOfParameterCombinations()}}}* method. Without these, JUnit would throw an exception with the message "No public static parameters method on class ExampleTest_Smoke".

== Regression test ==
{{{
/** Represents a regression-test (all-pairs) version of ExampleTest.
 * Pairs each value of each parameter to each value of all other parameters.
 * Far from exhaustive, but hopefully will find most bugs. */
public class ExampleTest_Regression extends ExampleTest {
	// <insert constructor here, identical to the ExampleTest_Smoke constructor>

	/** Returns a relatively small list of parameter combinations (i.e. test cases).
	 * @return the combination list. */
	@Parameterized.Parameters public static List<Object[]> listOfParameterCombinations() {
		final ParameterFactory parameterFactory = new AllPairsParameterFactory();
		// <create combinations here, just as in ExampleTest_Smoke>
	}
}
}}}

== Exhaustive test ==
{{{
/** Represents an exhaustive version of ExampleTest.
 * Tests all possible combinations of the parameter values. */
public class ExampleTest_Exhaustive extends ExampleTest {
	// <insert constructor here, identical to the ExampleTest_Smoke constructor>

	/** Returns a huge list of parameter combinations (i.e. test cases).
	 * @return the combination list. */
	@Parameterized.Parameters public static List<Object[]> listOfParameterCombinations() {
		final ParameterFactory parameterFactory = new AllCombinationsParameterFactory();
		// <create combinations here, just as in ExampleTest_Smoke>
	}
}
}}}